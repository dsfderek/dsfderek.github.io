(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{438:function(t,e,r){"use strict";r.r(e);var o=r(2),v=Object(o.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"react-redux-概述"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#react-redux-概述"}},[t._v("#")]),t._v(" React-redux 概述")]),t._v(" "),e("hr"),t._v(" "),e("p",[t._v("官方出品，可以很方便的从Redux store中读取数据，并且向store中分发action以此来更新数据")]),t._v(" "),e("ul",[e("li",[t._v("Provider 是个组件， 这个组件能使用整个app都能读取到store中的数据")]),t._v(" "),e("li",[t._v("connect 是个方法， 这个方法能使组件和store来进行关联")])]),t._v(" "),e("h2",{attrs:{id:"provider"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#provider"}},[t._v("#")]),t._v(" Provider")]),t._v(" "),e("hr"),t._v(" "),e("p",[e("code",[t._v("import { Provider } from 'react-redux'")]),t._v(" "),e("code",[t._v("<Provider store={store}></Provider>")])]),t._v(" "),e("ul",[e("li",[t._v("Provider 包裹在根组件的最外层，使所有的子组件都能拿到store")]),t._v(" "),e("li",[t._v("Provider 接收store 作为Props, 通过context向下传递，这样任何react组件都可以通过context获取到store")])]),t._v(" "),e("h2",{attrs:{id:"connect"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#connect"}},[t._v("#")]),t._v(" connect")]),t._v(" "),e("ul",[e("li",[t._v("Provider 内部组件如果想要使用state中的数据，必须要用connect进行一层包裹封装，必须要被connect加强")]),t._v(" "),e("li",[t._v("connect 的作用就是方便我们能拿到store 中的数据")])]),t._v(" "),e("ol",[e("li",[t._v("导入")]),t._v(" "),e("li",[t._v("调用")]),t._v(" "),e("li",[t._v("返回加强后的组件")])]),t._v(" "),e("p",[e("code",[t._v("export default connect(mapStateToProps, mapDisPatchToProps)(要加强的组件)")]),t._v(" "),e("code",[t._v("export default connect(接收数据的函数, 要发送action的函数)(要加强的组件)")]),t._v(" "),e("code",[t._v("mapStateToProps(state,action)")]),t._v(" "),e("code",[t._v("mapDisPatchToProps(dispatch)")])])])}),[],!1,null,null,null);e.default=v.exports}}]);